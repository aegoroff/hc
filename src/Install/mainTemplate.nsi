; Script generated by the HM NIS Edit Script Wizard.

!define PRODUCT_PUBLISHER "Egoroff"
!define PRODUCT_WEB_SITE "https://github.com/aegoroff/hc"
!define ISSUE_TRACKER_LINK_NAME "Issues"
!define ISSUE_TRACKER "https://github.com/aegoroff/hc/issues"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\${LowCaseName}.exe"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY HKLM

BrandingText "© 2009-2019 Alexander Egorov"
SetCompressor /SOLID lzma
SetCompressorDictSize 10
CRCCheck on
XPStyle on

; MUI 2.00 compatible ------
!include "MUI.nsh"
!include "x64.nsh"

Var product_edition

!include WordFunc.nsh
!insertmacro VersionCompare

!include LogicLib.nsh
;!include EnvVarUpdate.nsh


; MUI Settings / Header
!define MUI_HEADERIMAGE
!define MUI_HEADERIMAGE_RIGHT

; MUI Settings
!define MUI_ABORTWARNING

; Language Selection Dialog Settings
!define MUI_LANGDLL_REGISTRY_ROOT "${PRODUCT_UNINST_ROOT_KEY}"
!define MUI_LANGDLL_REGISTRY_KEY "${PRODUCT_UNINST_KEY}"
!define MUI_LANGDLL_REGISTRY_VALUENAME "NSIS:Language"

!ifdef INNER
  !insertmacro MUI_UNPAGE_CONFIRM
  !insertmacro MUI_UNPAGE_INSTFILES
!else

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!insertmacro MUI_PAGE_LICENSE "..\..\docs\license.txt"
; Directory page
!define MUI_DIRECTORYPAGE_VERIFYONLEAVE
!insertmacro MUI_PAGE_DIRECTORY
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!define MUI_FINISHPAGE_RUN_NOTCHECKED
!define MUI_FINISHPAGE_NOAUTOCLOSE
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

!endif

; Language files
!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_LANGUAGE "Russian"
!include "LanguageStrings.nsh"
!include "LanguageStrings${LangStrFileSuffix}.nsh"

; MUI end ------

Name "${PRODUCT_NAME} ${PRODUCT_VERSION} $product_edition"


!ifdef INNER
  !echo "Inner invocation"                  ; just to see what's going on
  OutFile "$%TEMP%\tempinstaller.exe"       ; not really important where this is
  SetCompress off
!else
  !echo "Outer invocation"
  ; Call makensis again, defining INNER.  This writes an installer for us which, when
  ; it is invoked, will just write the uninstaller to some location, and then exit.
  ; Be sure to substitute the name of this script here.

  !system "$\"${NSISDIR}\makensis$\" /DINNER /DConfiguration=${Configuration} /DPRODUCT_VERSION=${PRODUCT_VERSION} ${ThisFile}" = 0

  ; So now run that installer we just created as %TEMP%\tempinstaller.exe.  Since it
  ; calls quit the return value isn't zero.

  !system "$%TEMP%\tempinstaller.exe" = 2

  ; That will have written an uninstaller binary for us.  Now we sign it with your
  ; favourite code signing tool.

  ;!system "SIGNCODE <signing options> $%TEMP%\uninstaller.exe" = 0
  !system '"${CodeSigner}" "$%TEMP%\uninst.exe" > NUL 2>&1' = 0

  ; Good.  Now we can carry on writing the real installer.

  OutFile "${Configuration}\${LowCaseName}.setup.${PRODUCT_VERSION}.exe"
!endif


InstallDir "$PROGRAMFILES\${PRODUCT_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

VIProductVersion "${PRODUCT_VERSION}"
VIAddVersionKey /LANG=${LANG_ENGLISH} "ProductName" "${PRODUCT_NAME}"
VIAddVersionKey /LANG=${LANG_ENGLISH} "CompanyName" "${PRODUCT_PUBLISHER}"
VIAddVersionKey /LANG=${LANG_ENGLISH} "LegalCopyright" "© 2009-2019 Alexander Egorov"
VIAddVersionKey /LANG=${LANG_ENGLISH} "FileVersion" "${PRODUCT_VERSION}"
;Icon App.ico

Var /GLOBAL Upgrade

Function .onInit
!ifdef INNER

    ; If INNER is defined, then we aren't supposed to do anything except write out
    ; the installer.  This is better than processing a command line option as it means
    ; this entire code path is not present in the final (real) installer.

    WriteUninstaller "$%TEMP%\uninst.exe"
    Quit  ; just bail out quickly when running the "inner" installer
!endif
  	${If} ${RunningX64}
		StrCpy $INSTDIR "$PROGRAMFILES64\${PRODUCT_NAME}"
	${Else}	
		StrCpy $INSTDIR "$PROGRAMFILES\${PRODUCT_NAME}"
	${EndIf}
  	${If} ${RunningX64}
		StrCpy $product_edition "x64"
	${Else}	
		StrCpy $product_edition "x86"
	${EndIf}
  !insertmacro MUI_LANGDLL_DISPLAY
	ReadRegStr $R0 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion"
	${VersionCompare} $R0 ${PRODUCT_VERSION} $1
        StrCpy $Upgrade "False" 5
        ${If} $1 == 2
                StrCpy $Upgrade "True" 4
                goto CheckOSVersion
	${EndIf}
        ${If} $1 == 1
                MessageBox MB_OK $(NEWER_VERSION_INSTALLED)
	        Abort
	${EndIf}
        ${If} $1 == 0
                MessageBox MB_OK $(SAME_VERSION_INSTALLED)
	        Abort
	${EndIf}
	goto CheckOSVersion
  CheckOSVersion:
        Call IsSupportedWindowsVersion
        Pop $R0
        StrCmp $R0 "True" NoAbort 0
	MessageBox MB_OK $(UNSUPPORTED_OS)
        Abort
   NoAbort:
FunctionEnd

Section "MainSection" SEC01
  SetOutPath "$INSTDIR"
  SetOverwrite try
  
  SetOutPath "$INSTDIR"
  ; Configuration must be defined in Compiler profiles!

   	${If} ${RunningX64}  
		File "..\Binplace-x64\${Configuration}\${LowCaseName}.exe"
	${Else}	
		File "..\Binplace-x86\${Configuration}\${LowCaseName}.exe"
	${EndIf}
    
  SetOutPath "$INSTDIR\ru\LC_MESSAGES"
	${If} ${RunningX64}  
		File "..\x64\${Configuration}\ru\LC_MESSAGES\${LowCaseName}.mo"
	${Else}	
		File "..\${Configuration}\ru\LC_MESSAGES\${LowCaseName}.mo"
	${EndIf}

  SetOutPath "$INSTDIR"
  
  File /oname=Readme.ru.txt "..\..\docs\Readme.${LowCaseName}.ru.txt"
  File /oname=Readme.en.txt "..\..\docs\Readme.${LowCaseName}.en.txt"
  
!ifndef INNER
  ; this packages the signed uninstaller

  File $%TEMP%\uninst.exe
!endif
  
  CreateDirectory "$SMPROGRAMS\${PRODUCT_NAME}"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\$(PROGRAM_NAME).lnk" "cmd.exe" "/K ${LowCaseName}.exe"
;  ${EnvVarUpdate} $0 "PATH" "A" "HKLM" "$INSTDIR" ; Append
SectionEnd

Section -AdditionalIcons
  ${If} ${RunningX64}
		StrCpy $INSTDIR "$PROGRAMFILES64\${PRODUCT_NAME}"
  ${Else}	
		StrCpy $INSTDIR "$PROGRAMFILES\${PRODUCT_NAME}"
  ${EndIf}
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  WriteIniStr "$INSTDIR\${ISSUE_TRACKER_LINK_NAME}.url" "InternetShortcut" "URL" "${ISSUE_TRACKER}"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\$(PROGRAM_SITE).lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\$(ISSUE_TRACKER_LOCALIZATION).lnk" "$INSTDIR\${ISSUE_TRACKER_LINK_NAME}.url"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Readme.lnk" "$INSTDIR\$(README_FILE)"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\$(UNINSTALL).lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  ${If} ${RunningX64}
		StrCpy $INSTDIR "$PROGRAMFILES64\${PRODUCT_NAME}"
  ${Else}	
		StrCpy $INSTDIR "$PROGRAMFILES\${PRODUCT_NAME}"
  ${EndIf}
  ;WriteUninstaller "$INSTDIR\uninst.exe"
 
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\${LowCaseName}.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\${LowCaseName}.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
SectionEnd


Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK $(DELETE_CONFIRMATION)
FunctionEnd

Function un.onInit
!insertmacro MUI_UNGETLANGUAGE
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 $(DELETE_ASK) IDYES +2
  Abort
FunctionEnd

Section Uninstall
  Delete "$INSTDIR\${PRODUCT_NAME}.url"
  Delete "$INSTDIR\${ISSUE_TRACKER_LINK_NAME}.url"
  Delete "$INSTDIR\uninst.exe"
  Delete "$INSTDIR\${LowCaseName}.exe"
  Delete "$INSTDIR\Readme.ru.txt"
  Delete "$INSTDIR\Readme.en.txt"
  
;  ${un.EnvVarUpdate} $0 "PATH" "R" "HKLM" "$INSTDIR"      ; Remove path
  RMDir /r "$SMPROGRAMS\${PRODUCT_NAME}"
  RMDir /r "$INSTDIR"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  
  SetAutoClose true
SectionEnd

!ifdef INNER
Section "Uninstall"

  ; your normal uninstaller section or sections (they're not needed in the "outer"
  ; installer and will just cause warnings because there is no WriteInstaller command)

SectionEnd
!endif

; GetWindowsVersion, taken from NSIS help, modified for our purposes
Function IsSupportedWindowsVersion

   Push $R0
   Push $R1

   ClearErrors

   ReadRegStr $R0 HKLM "SOFTWARE\Microsoft\Windows NT\CurrentVersion" CurrentVersion
   IfErrors 0 lbl_winnt
   ; we are not NT
   ReadRegStr $R0 HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion" VersionNumber

   StrCpy $R1 $R0 1

   StrCmp $R1 '4' 0 lbl_error

   StrCpy $R1 $R0 3

   StrCmp $R1 '4.0' lbl_win32_95
   StrCmp $R1 '4.9' lbl_win32_ME lbl_win32_98

   lbl_win32_95:
     StrCpy $R0 'False'
   Goto lbl_done

   lbl_win32_98:
     StrCpy $R0 'False'
   Goto lbl_done

   lbl_win32_ME:
     StrCpy $R0 'False'
   Goto lbl_done

   lbl_winnt:
    Strcpy $R0 'True'
   Goto lbl_done

   lbl_error:
     Strcpy $R0 'False'
   lbl_done:

   Pop $R1
   Exch $R0

FunctionEnd