/*!
 * \brief   The file contains class implementation
 * \author  \verbatim
            Created by: Alexander Egorov
            \endverbatim
 * \date    \verbatim
            Creation date: 2011-11-18
            \endverbatim
 * Copyright: (c) Alexander Egorov 2011
 */

#include "HLINQTest.h"
using namespace std;

void HLINQTest::SetUp()
{
    cout_stream_buffer_ = cout.rdbuf(oss_.rdbuf());
}

void HLINQTest::TearDown()
{
    cout.rdbuf(cout_stream_buffer_);
    psr_->free(psr_);
    psr_ = NULL;
    tstream_->free(tstream_);
    tstream_ = NULL;
    lxr_->free(lxr_);
    lxr_ = NULL;
    input_->close(input_);
    input_ = NULL;
}

void HLINQTest::Run(const char* q, BOOL dontRunActions)
{
    const char* utf8 = FromAnsiToUtf8(q, pool_);
    input_   = antlr3StringStreamNew((pANTLR3_UINT8)utf8, ANTLR3_ENC_UTF8, strlen(q), (pANTLR3_UINT8)"");
    lxr_     = HLINQLexerNew(input_);     // HLINQLexerNew is generated by ANTLR
    tstream_ = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lxr_));
    psr_     = HLINQParserNew(tstream_);  // HLINQParserNew is generated by ANTLR3
    psr_->prog(psr_, pool_, dontRunActions);
}

void HLINQTest::ValidateNoError()
{
    ASSERT_STREQ("", oss_.str().c_str());
}

void HLINQTest::ValidateError()
{
    ASSERT_TRUE(oss_.str().length() > 0);
}

TEST_F(HLINQTest, OnlyComment) {
    Run("# Comment\n");
    ValidateNoError();
}

TEST_F(HLINQTest, CommentUnixLine) {
    Run("# Comment\nfor dir d from 'c:' do find;");
    ValidateNoError();
}

TEST_F(HLINQTest, CommentWinLine) {
    Run("# Comment\r\nfor dir d from 'c:' do find;");
    ValidateNoError();
}

TEST_F(HLINQTest, FileNameEq) {
    Run("for dir f from 'c:' where f.name == 'test' do find;");
    ValidateNoError();
}

TEST_F(HLINQTest, CalcStrHash) {
    Run("for string from '123' do md5;");
    ValidateNoError();
}

TEST_F(HLINQTest, CalcStrHashRun) {
    Run("for string from '123' do md5;", FALSE);
    ValidateNoError();
}

TEST_F(HLINQTest, CalcStrHashRunMaxSet) {
    Run("for hash s from '202CB962AC59075B964B07152D234B70' let s.max = 5, s.dict = '0-9', s.min = 3 do crack md5;", FALSE);
    ValidateNoError();
}

TEST_F(HLINQTest, CalcStrHashCrackBadRun) {
    Run("for hash s from '83DCEFB7' do crack crc321;", FALSE);
    ValidateError();
}

TEST_F(HLINQTest, InvalidStrSyntaxRun) {
    Run("for hash h from '83DCEFB7' do crack crc321;", FALSE);
    ValidateError();
}

TEST_F(HLINQTest, TwoDifferentQueries) {
    Run("for dir f from 'z:' let f.limit = 1024, f.offset = 10 where f.name ~ '*.exe' do md5;for string from '123' do sha1;");
    ValidateNoError();
}

TEST_F(HLINQTest, TwoQueries) {
    Run("for string from '123' do sha1;for string from '123' do md5;");
    ValidateNoError();
}

TEST_F(HLINQTest, CrackStr) {
    Run("for hash s from 'D41D8CD98F00B204E9800998ECF8427E' let s.min = 4 do crack md5;");
    ValidateNoError();
}

TEST_F(HLINQTest, NoQueryEnd) {
    Run("for dir d from 'c:' do md5");
    ValidateError();
}

TEST_F(HLINQTest, InvalidId) {
    Run("for dir f from 'c:' where f1.size == 0 do find;");
    ValidateError();
}

TEST_F(HLINQTest, InvalidIdInLet) {
    Run("for hash s from 'D41D8CD98F00B204E9800998ECF8427E' let s1.min = 4 do crack md5;");
    ValidateError();
}

TEST_F(HLINQTest, WhereSimple) {
    Run("for dir f from 'c:' where f.size == 0 do find;");
    ValidateNoError();
}

TEST_F(HLINQTest, WhereTwoAnd) {
    Run("for dir f from 'c:' where f.size == 0 and f.name ~ '*.exe' do find;");
    ValidateNoError();
}

TEST_F(HLINQTest, WhereTwoOr) {
    Run("for dir f from 'c:' where f.size == 0 or f.name ~ '*.exe' do find;");
    ValidateNoError();
}

TEST_F(HLINQTest, WhereBraces) {
    Run("for dir f from 'c:' where f.size == 0 and (f.name ~ '*.exe' or f.path ~ 'c:\\temp\\*') do find;");
    ValidateNoError();
}

TEST_F(HLINQTest, WhereBracesUnclosed) {
    Run("for dir f from 'c:' where f.size == 0 and (f.name ~ '*.exe' or f.path ~ 'c:\\temp\\*' do find;");
    ValidateError();
}