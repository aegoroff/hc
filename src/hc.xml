<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- http://code.google.com/p/msbuildteamcitytasks/ -->
  <Import Project="$(MSBuildThisFileDirectory)\packages\msbuildteamcitytasks.2.6.79.0\tools\MSBuild.TeamCity.Tasks.Targets" />
  <Import Project="$(MSBuildThisFileDirectory)\hc\localization.target" />
  <PropertyGroup>
    <Configuration>Release</Configuration>
    <Cuda>true</Cuda>
    <!-- Version components  -->
    <Major Condition=" '$(Major)' == '' ">1</Major>
    <Minor Condition=" '$(Minor)' == '' ">0</Minor>
    <Build Condition=" '$(Build)' == '' ">0</Build>
    <Revision Condition=" '$(Revision)' == '' ">0</Revision>
    <MultiProcessorCompilation>true</MultiProcessorCompilation>

    <!-- NSIS installer's path  -->
    <NSISPath>$(NSIS_ROOT)</NSISPath>

    <!-- binplace utility path  -->
    <BinPlacePath>$(WINDDK)\bin\x86</BinPlacePath>
    <SymStorePath>$(WINDDK)\Debuggers\x64</SymStorePath>
    <TmpFile>tmp.bat</TmpFile>
    <PgoEnabled>true</PgoEnabled>
    <GnuBasePath>$(ChocolateyInstall)\lib\winflexbison3\tools</GnuBasePath>
    <EchoCommand>echo</EchoCommand>
    <VsBasePath>$(VS140COMNTOOLS)..\..\..\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.11.25503</VsBasePath>
    <PvsStudioPath>c:\Program Files (x86)\PVS-Studio\PVS-Studio_Cmd.exe</PvsStudioPath>
    <PvsStudioReportFile>linq2hash.plog</PvsStudioReportFile>
    <PlogConverterPath>c:\Program Files (x86)\PVS-Studio\PlogConverter.exe</PlogConverterPath>
  </PropertyGroup>
  <PropertyGroup Condition="$(KeyFile) != '' AND $(CertPassword) != '' AND $(SignTool) != ''">
    <SignCommand>"$(SignTool)" sign /f "$(KeyFile)" /p $(CertPassword) /t http://timestamp.verisign.com/scripts/timestamp.dll /v /d "hc" /du https://github.com/aegoroff/hc %251</SignCommand>
  </PropertyGroup>
  <PropertyGroup Condition="$(Configuration) == 'Release' AND $(PgoEnabled) == true">
    <LinkType>LinkType=PGInstrument</LinkType>
  </PropertyGroup>
  <PropertyGroup Condition="$(Configuration) == 'Debug'">
    <LinkType></LinkType>
  </PropertyGroup>
  <ItemGroup>
    <ResourceFile Include="$(MSBuildProjectDirectory)\hc\hc.rc" />
    <ResourceFile Include="$(MSBuildProjectDirectory)\l2h\l2h.rc" />
  </ItemGroup>
  <ItemGroup>
    <TargetverFile Include="$(MSBuildProjectDirectory)\hc\targetver.h" />
    <TargetverFile Include="$(MSBuildProjectDirectory)\l2h\targetver.h" />
  </ItemGroup>
  <!-- Update version -->
  <Target Name="VersionUpdater">
    <BlockOpen Name="Preparation" />
    <ItemGroup>
      <ResourceFiles Include="@(ResourceFile)">
        <Find><![CDATA[VALUE\s*"(FileVersion|ProductVersion)",\s*"\d+([.,]\s*)\d+([.,]\s*)\d+([.,]\s*)\d+"]]></Find>
        <ReplaceWith><![CDATA[VALUE "$1", "$(Major), $(Minor), $(Build), $(Revision)"]]></ReplaceWith>
        <Options>Singleline</Options>
      </ResourceFiles>
      <ResourceFiles Include="@(ResourceFile)">
        <Find><![CDATA[(FILEVERSION|PRODUCTVERSION)(\s*)(\d+),(\d+),(\d+),(\d+)]]></Find>
        <ReplaceWith><![CDATA[$1 $(Major),$(Minor),$(Build),$(Revision)]]></ReplaceWith>
        <Options>Singleline</Options>
      </ResourceFiles>
      <ResourceFiles Include="@(TargetverFile)">
        <Find><![CDATA[(#define PRODUCT_VERSION)(\s*)"(\d+).(\d+).(\d+).(\d+)"]]></Find>
        <ReplaceWith><![CDATA[$1 "$(Major).$(Minor).$(Build).$(Revision)"]]></ReplaceWith>
        <Options>Singleline</Options>
      </ResourceFiles>
    </ItemGroup>
    <RegexTransform Items="@(ResourceFiles)" />
    <BlockClose Name="Preparation" />
  </Target>

    <Choose>
        <When Condition=" $(Cuda) == true ">
            <PropertyGroup>
                <ExcludeTraits>Arch=x86</ExcludeTraits>
                <NsisAdditional></NsisAdditional>
            </PropertyGroup>
            <ItemGroup>
                <Platform Include="x64" />
            </ItemGroup>
        </When>
        <When Condition=" $(Cuda) != true ">
            <PropertyGroup>
                <ExcludeTraits></ExcludeTraits>
                <NsisAdditional>/DALL</NsisAdditional>
            </PropertyGroup>
            <ItemGroup>
                <Platform Include="Win32" />
                <Platform Include="x64" />
            </ItemGroup>
        </When>
    </Choose>
    
  <!-- Compilation -->
  <Target Name="Compile" DependsOnTargets="VersionUpdater">
    <ItemGroup>
      <UtilityProject Include="$(MSBuildProjectDirectory)\doc.gen\doc.gen.csproj" />
    </ItemGroup>
    <ItemGroup>
      <TestsProject Include="$(MSBuildProjectDirectory)\_tst.net\_tst.net.csproj" />
      <TestsProject Include="$(MSBuildProjectDirectory)\_tst.pgo\_tst.pgo.csproj" />
    </ItemGroup>
    <ItemGroup>
      <PgoProject Include="$(MSBuildProjectDirectory)\pcre\pcre.vcxproj" />
      <PgoProject Include="$(MSBuildProjectDirectory)\libtomcrypt\libtomcrypt.vcxproj" />
      <PgoProject Include="$(MSBuildProjectDirectory)\hc\hc.vcxproj" />
      <PgoProject Include="$(MSBuildProjectDirectory)\l2h\l2h.vcxproj" />
      <PgoProject Include="$(MSBuildProjectDirectory)\_tst\_tst.vcxproj" />
    </ItemGroup>
    <ItemGroup>
      <WorkingDir Include="$(MSBuildProjectDirectory)\$(Configuration)" />
    </ItemGroup>
    <ItemGroup>
      <WorkingDir64 Include="$(MSBuildProjectDirectory)\x64\$(Configuration)" />
    </ItemGroup>
    <ItemGroup>
      <TargetDir Include="$(MSBuildProjectDirectory)\$(Configuration)" />
      <TargetDir Include="$(MSBuildProjectDirectory)\x64\$(Configuration)" />
    </ItemGroup>

    <Exec 
      Condition="$(APPVEYOR) != '' OR $(TEAMCITY_VERSION) != ''"
      WorkingDirectory="$(MSBuildProjectDirectory)\l2h"
      Command='"$(GnuBasePath)\win_flex.exe" --wincompat --outfile="l2h.flex.c" l2h.lex' />
    <Exec 
      Condition="$(APPVEYOR) != '' OR $(TEAMCITY_VERSION) != ''" 
      WorkingDirectory="$(MSBuildProjectDirectory)\l2h"
      Command='"$(GnuBasePath)\win_bison.exe" --output="l2h.tab.c" -dy l2h.y' />
    
    <BlockOpen Name="CompilationPGO" />
    <MSBuild
      Projects="@(UtilityProject)"
      BuildInParallel="true"
      Properties="Configuration=$(Configuration);Platform=x86" />
    <MSBuild
      Projects="@(TestsProject)"
      BuildInParallel="true"
      Condition="$(Cuda) != true"
      Properties="Configuration=$(Configuration);Platform=AnyCPU" />
   <MSBuild
      Projects="@(TestsProject)"
      BuildInParallel="true"
      Condition="$(Cuda) == true"
      Properties="Configuration=$(Configuration);Platform=AnyCPU;DefineConstants=CUDA" />
    <MSBuild
      Projects="@(PgoProject)"
      BuildInParallel="true"
      Properties="Configuration=$(Configuration);Platform=%(Platform.Identity);SolutionDir=$(MSBuildProjectDirectory)\;$(LinkType);MultiProcessorCompilation=$(MultiProcessorCompilation)" />
    <!-- HACK! -->
    <Copy
      SourceFiles="$(VsBasePath)\bin\HostX86\x86\pgort140.dll"
      DestinationFolder="%(WorkingDir.Identity)"
      Condition="$(Configuration) == 'Release' AND $(PgoEnabled) == true and $(Cuda) != true" />
    <Copy
      SourceFiles="$(VsBasePath)\bin\HostX64\x64\pgort140.dll"
      DestinationFolder="%(WorkingDir64.Identity)"
      Condition="$(Configuration) == 'Release' AND $(PgoEnabled) == true" />

    <ItemGroup>
      <Profile Include="%(WorkingDir.Identity)\*.pgc" />
      <Profile Include="%(WorkingDir64.Identity)\*.pgc" />
    </ItemGroup>


    <Delete
      Condition="$(Configuration) == 'Release' AND $(PgoEnabled) == true"
      Files="@(Profile)" />

    <!-- PGO tests -->
    <xunit
      Assemblies="$(MSBuildProjectDirectory)\_tst.pgo\bin\$(Configuration)\_tst.pgo.dll"
      Condition="$(Configuration) == 'Release' AND $(PgoEnabled) == true"
      ExcludeTraits="@(ExcludeTraits)"
      ShadowCopy="false" />

    <MSBuild
      Projects="@(PgoProject)"
      BuildInParallel="true"
      Condition="$(Configuration) == 'Release' AND $(PgoEnabled) == true"
      Properties="Configuration=$(Configuration);Platform=%(Platform.Identity);SolutionDir=$(MSBuildProjectDirectory)\;LinkType=PGOptimization;MultiProcessorCompilation=$(MultiProcessorCompilation)" />

    <BlockClose Name="CompilationPGO" />
  </Target>
  <!-- Native tests -->
  <Target Name="Tests" DependsOnTargets="Compile">
    <BlockOpen Name="Unit tests" />
    <ItemGroup>
      <TestExe Include="$(MSBuildProjectDirectory)\$(Configuration)\_t*.exe" />
      <TestExe Include="$(MSBuildProjectDirectory)\x64\$(Configuration)\_t*.exe" />
    </ItemGroup>
    <RunGoogleTests
      TestExePath="%(TestExe.Identity)"
      CatchGtestExceptions="true"
      Verbose="true"
      WhenNoDataPublished="error" />
  </Target>
  <!-- Managed tests -->
  <Target Name="ManagedTests" DependsOnTargets="Tests">
    <xunit
      Assemblies="$(MSBuildProjectDirectory)\_tst.net\bin\$(Configuration)\_tst.net.dll"
      Condition="$(TEAMCITY_VERSION) != ''"
      ExcludeTraits="@(ExcludeTraits)"
      ShadowCopy="false" />

    <BlockClose Name="Unit tests" />
  </Target>
  <ItemGroup>
    <Binfile Include="hc" />
    <Binfile Include="l2h" />
  </ItemGroup>
  <!-- Validation using PVS Studio -->
  <Target Name="PvsStudioValidation" DependsOnTargets="Compile">
    <ItemGroup>
      <ReportFormat Include="Html" />
      <ReportFormat Include="Txt" />
    </ItemGroup>
    <Exec
      WorkingDirectory="$(MSBuildProjectDirectory)"
      Condition="$(TEAMCITY_VERSION) != ''"
      IgnoreExitCode="True"
      Command='"$(PvsStudioPath)" -t "$(MSBuildProjectDirectory)\linq2hash.sln" -o $(PvsStudioReportFile) -p x64' />
    <Exec
      WorkingDirectory="$(MSBuildProjectDirectory)"
      Condition="$(TEAMCITY_VERSION) != ''"
      Command='"$(PlogConverterPath)" -t %(ReportFormat.Identity) $(PvsStudioReportFile) -a GA:1,2;64:1;OP:1,2' />
    <Exec
      WorkingDirectory="$(MSBuildProjectDirectory)"
      Condition="$(TEAMCITY_VERSION) != ''"
      Command='"$(PlogConverterPath)" -t Totals $(PvsStudioReportFile)' />
  </Target>
  <!-- Binplace tasks -->
  <Target Name="Binplace" DependsOnTargets="ManagedTests;PvsStudioValidation">
    <Exec
      WorkingDirectory="$(MSBuildProjectDirectory)\$(Configuration)"
      Condition="$(TEAMCITY_VERSION) != '' and $(Cuda) != true"
      Command='"$(BinPlacePath)\binplace.exe" -v -p $(MSBuildProjectDirectory)\..\binplace.txt -r $(MSBuildProjectDirectory)\Binplace-x86\$(Configuration) %(Binfile.Identity).exe' />
    <Exec
      WorkingDirectory="$(MSBuildProjectDirectory)"
      Condition="$(TEAMCITY_VERSION) != '' and $(Cuda) != true"
      Command='"$(SymStorePath)\symstore.exe" add /F $(MSBuildProjectDirectory)\Binplace-x86\$(Configuration)\%(Binfile.Identity).pdb /S "$(_NT386TREE)\sym.pri" /t "%(Binfile.Identity) calculator" /r /z pri' />
    <Exec
      WorkingDirectory="$(MSBuildProjectDirectory)\x64\$(Configuration)"
      Condition="$(TEAMCITY_VERSION) != ''"
      Command='"$(BinPlacePath)\binplace.exe" -v -p $(MSBuildProjectDirectory)\..\binplace.txt -r $(MSBuildProjectDirectory)\Binplace-x64\$(Configuration) %(Binfile.Identity).exe' />
    <Exec
      WorkingDirectory="$(MSBuildProjectDirectory)"
      Condition="$(TEAMCITY_VERSION) != ''"
      Command='"$(SymStorePath)\symstore.exe" add /F $(MSBuildProjectDirectory)\Binplace-x64\$(Configuration)\%(Binfile.Identity).pdb /S "$(_NTAMD64TREE)\sym.pri" /t "%(Binfile.Identity) calculator" /r /z pri' />
  </Target>
  <!-- Sign executables -->
  <Target Name="ExeSigning" DependsOnTargets="Binplace">

    <ItemGroup>
      <TargetPathToCreate Include="$(MSBuildProjectDirectory)\Binplace-x86\$(Configuration)" />
      <TargetPathToCreate Include="$(MSBuildProjectDirectory)\Binplace-x64\$(Configuration)" />
    </ItemGroup>

    <MakeDir
      Directories="@(TargetPathToCreate)"
      Condition="$(TEAMCITY_VERSION) == ''" />

    <ItemGroup>
      <x86bin Include="$(MSBuildProjectDirectory)\$(Configuration)\*.exe" />
    </ItemGroup>
    <ItemGroup>
      <x64bin Include="$(MSBuildProjectDirectory)\x64\$(Configuration)\*.exe" />
    </ItemGroup>

    <Copy
      SourceFiles="@(x86bin)"
      Condition="$(TEAMCITY_VERSION) == '' and $(Cuda) != true"
      DestinationFolder="$(MSBuildProjectDirectory)\Binplace-x86\$(Configuration)" />
    <Copy
      SourceFiles="@(x64bin)"
      Condition="$(TEAMCITY_VERSION) == ''"
      DestinationFolder="$(MSBuildProjectDirectory)\Binplace-x64\$(Configuration)" />

    <WriteLinesToFile Condition="$(SignCommand) != ''" File="$(TmpFile)" Lines="$(SignCommand)" />
    <Exec
      Condition="$(SignCommand) != '' and $(Cuda) != true"
      Command="$(TmpFile) &quot;$(MSBuildProjectDirectory)\Binplace-x86\$(Configuration)\%(Binfile.Identity).exe&quot; > NUL 2>&amp;1"
      WorkingDirectory="$(MsBuildThisFileDirectory)" />
    <Exec
      Condition="$(SignCommand) != ''"
      Command="$(TmpFile) &quot;$(MSBuildProjectDirectory)\Binplace-x64\$(Configuration)\%(Binfile.Identity).exe&quot; > NUL 2>&amp;1"
      WorkingDirectory="$(MsBuildThisFileDirectory)" />
    <Delete Files="$(TmpFile)" Condition="Exists('$(TmpFile)')" />
  </Target>
  <ItemGroup>
    <Installer Include="mainHLINQ.nsi" />
  </ItemGroup>
  <!-- Setup building -->
  <Target Name="Setup" DependsOnTargets="ExeSigning;LocalizationBuild">
    <MakeDir Directories="$(MSBuildProjectDirectory)\Install\$(Configuration)" />

    <!-- Documentation building -->
    <Exec
      Command='"$(MSBuildProjectDirectory)\doc.gen\bin\$(Configuration)\doc.gen.exe" "$(MSBuildProjectDirectory)\..\docs"' />
    <WriteLinesToFile Condition="$(SignCommand) != ''" File="$(TmpFile)" Lines="$(SignCommand)" />
    <WriteLinesToFile Condition="$(SignCommand) == ''" File="$(TmpFile)" Lines="$(EchoCommand)" />
    <Exec
      WorkingDirectory="$(MSBuildProjectDirectory)\Install"
      Command='"$(NSISPath)\makensis.exe" /NOTIFYHWND 131948 /DConfiguration=$(Configuration) /DPRODUCT_VERSION=$(Major).$(Minor).$(Build).$(Revision) $(NsisAdditional) /DCodeSigner="$(MSBuildProjectDirectory)\$(TmpFile)" "%(Installer.Identity)"' />

    <ItemGroup>
      <SetupFile Include="$(MSBuildProjectDirectory)\Install\$(Configuration)\*.exe" />
    </ItemGroup>

    <Exec
      Condition="$(SignCommand) != ''"
      Command="$(TmpFile) &quot;%(SetupFile.Identity)&quot; > NUL 2>&amp;1"
      WorkingDirectory="$(MsBuildThisFileDirectory)" />
    <Move
      SourceFiles="@(SetupFile->'%(FullPath)')"
      Condition="$(Configuration) == 'Debug'"
      OverwriteReadOnlyFiles="true"
      DestinationFiles="@(SetupFile-&gt;'%(RootDir)%(Directory)$([System.String]::Concat('%(FileName)','-dev'))%(Extension)')" />
    <Delete Files="$(TmpFile)" Condition="Exists('$(TmpFile)')" />
  </Target>
  <!-- Portable version building -->
  <Target Name="ZipPortable">
    <ItemGroup>
      <Arch Include="x86" />
      <Arch Include="x64" />
    </ItemGroup>
    <Exec
      Command="7z a hc.$(Major).$(Minor).$(Build).$(Revision).%(Arch.Identity).zip $(MSBuildProjectDirectory)\Binplace-%(Arch.Identity)\$(Configuration)\*.exe $(MSBuildProjectDirectory)\..\docs\*.txt -ir!$(MSBuildProjectDirectory)\$(Configuration)\*.mo -x!_tst.*"
      WorkingDirectory="$(MsBuildThisFileDirectory)" />
  </Target>
  <!-- Main target -->
  <Target Name="Build" DependsOnTargets="Setup;ZipPortable">
    <Message Text="Build $(Major).$(Minor).$(Build).$(Revision) Complete" />
  </Target>

  <ItemGroup>
    <XunitTools
      Include="$(MSBuildProjectDirectory)\packages\xunit.runner.msbuild.*\build\net4*\xunit.runner.msbuild*.dll" />
  </ItemGroup>

  <UsingTask AssemblyFile="@(XunitTools)" TaskName="Xunit.Runner.MSBuild.xunit" />

  <UsingTask TaskName="RegexTransform" TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
			   foreach(var item in Items)
			   {
				 string fileName = item.GetMetadata("FullPath");
				 string find = item.GetMetadata("Find");
				 string replaceWith = item.GetMetadata("ReplaceWith");
				 string optionsValue = item.GetMetadata("Options") ?? "";
		 
				 var options = string.IsNullOrWhiteSpace(optionsValue) ?
					 RegexOptions.None : (RegexOptions)Enum.Parse(typeof(RegexOptions), optionsValue.Replace('|', ','));
		 
				 if(!File.Exists(fileName))
				 {
				   Log.LogError("Could not find file: {0}", fileName);
				   return false;
				 }
				 string content = File.ReadAllText(fileName);
				 File.WriteAllText(
				   fileName,
				   Regex.Replace(
					 content,
					 find,
					 replaceWith,
					 options
				   )
				 );
			   }
			 ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>