/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : HLINQ.g
 *     -                            On : 2013-07-07 14:11:47
 *     -                for the parser : HLINQParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
HLINQParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pHLINQParser, which is returned from a call to HLINQParserNew().
 *
 * The methods in pHLINQParser are  as follows:
 *
 *  - 
 HLINQParser_prog_return
      pHLINQParser->prog(pHLINQParser)
 *  - 
 HLINQParser_statement_return
      pHLINQParser->statement(pHLINQParser)
 *  - 
 HLINQParser_expr_return
      pHLINQParser->expr(pHLINQParser)
 *  - 
 HLINQParser_expr_vardef_return
      pHLINQParser->expr_vardef(pHLINQParser)
 *  - 
 HLINQParser_expr_string_return
      pHLINQParser->expr_string(pHLINQParser)
 *  - 
 HLINQParser_expr_hash_return
      pHLINQParser->expr_hash(pHLINQParser)
 *  - 
 HLINQParser_expr_dir_return
      pHLINQParser->expr_dir(pHLINQParser)
 *  - 
 HLINQParser_expr_file_return
      pHLINQParser->expr_file(pHLINQParser)
 *  - 
 HLINQParser_expr_file_analyze_return
      pHLINQParser->expr_file_analyze(pHLINQParser)
 *  - 
 HLINQParser_source_return
      pHLINQParser->source(pHLINQParser)
 *  - 
 HLINQParser_id_return
      pHLINQParser->id(pHLINQParser)
 *  - 
 HLINQParser_attr_clause_return
      pHLINQParser->attr_clause(pHLINQParser)
 *  - 
 HLINQParser_attr_return
      pHLINQParser->attr(pHLINQParser)
 *  - 
 HLINQParser_hash_clause_return
      pHLINQParser->hash_clause(pHLINQParser)
 *  - 
 HLINQParser_brute_force_clause_return
      pHLINQParser->brute_force_clause(pHLINQParser)
 *  - 
 HLINQParser_let_clause_return
      pHLINQParser->let_clause(pHLINQParser)
 *  - 
 HLINQParser_where_clause_return
      pHLINQParser->where_clause(pHLINQParser)
 *  - 
 HLINQParser_boolean_expression_return
      pHLINQParser->boolean_expression(pHLINQParser)
 *  - 
 HLINQParser_conditional_or_expression_return
      pHLINQParser->conditional_or_expression(pHLINQParser)
 *  - 
 HLINQParser_conditional_and_expression_return
      pHLINQParser->conditional_and_expression(pHLINQParser)
 *  - 
 HLINQParser_not_expression_return
      pHLINQParser->not_expression(pHLINQParser)
 *  - 
 HLINQParser_exclusive_or_expression_return
      pHLINQParser->exclusive_or_expression(pHLINQParser)
 *  - 
 HLINQParser_relational_expr_return
      pHLINQParser->relational_expr(pHLINQParser)
 *  - 
 HLINQParser_relational_expr_str_return
      pHLINQParser->relational_expr_str(pHLINQParser)
 *  - 
 HLINQParser_relational_expr_int_return
      pHLINQParser->relational_expr_int(pHLINQParser)
 *  - 
 HLINQParser_assign_return
      pHLINQParser->assign(pHLINQParser)
 *  - 
 HLINQParser_str_attr_return
      pHLINQParser->str_attr(pHLINQParser)
 *  - 
 HLINQParser_int_attr_return
      pHLINQParser->int_attr(pHLINQParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_HLINQParser_H
#define _HLINQParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct HLINQParser_Ctx_struct HLINQParser, * pHLINQParser;



	#define	MAX_STATEMENTS 10000
	#include "..\srclib\lib.h"
#ifdef GTEST
  #include "displayError.h"
#endif


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct HLINQParser_prog_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_prog_return;



typedef struct HLINQParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_statement_return;



typedef struct HLINQParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_expr_return;



typedef struct HLINQParser_expr_vardef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_expr_vardef_return;



typedef struct HLINQParser_expr_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_expr_string_return;



typedef struct HLINQParser_expr_hash_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_expr_hash_return;



typedef struct HLINQParser_expr_dir_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_expr_dir_return;



typedef struct HLINQParser_expr_file_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_expr_file_return;



typedef struct HLINQParser_expr_file_analyze_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_expr_file_analyze_return;



typedef struct HLINQParser_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_source_return;



typedef struct HLINQParser_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_id_return;



typedef struct HLINQParser_attr_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_attr_clause_return;



typedef struct HLINQParser_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_attr_return;



typedef struct HLINQParser_hash_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_hash_clause_return;



typedef struct HLINQParser_brute_force_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_brute_force_clause_return;



typedef struct HLINQParser_let_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_let_clause_return;



typedef struct HLINQParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_where_clause_return;



typedef struct HLINQParser_boolean_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_boolean_expression_return;



typedef struct HLINQParser_conditional_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_conditional_or_expression_return;



typedef struct HLINQParser_conditional_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_conditional_and_expression_return;



typedef struct HLINQParser_not_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_not_expression_return;



typedef struct HLINQParser_exclusive_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_exclusive_or_expression_return;



typedef struct HLINQParser_relational_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_relational_expr_return;



typedef struct HLINQParser_relational_expr_str_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_relational_expr_str_return;



typedef struct HLINQParser_relational_expr_int_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_relational_expr_int_return;



typedef struct HLINQParser_assign_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_assign_return;



typedef struct HLINQParser_str_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_str_attr_return;



typedef struct HLINQParser_int_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQParser_int_attr_return;




/** Context tracking structure for 
HLINQParser

 */
struct HLINQParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     HLINQParser_prog_return
     (*prog)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_statement_return
     (*statement)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_expr_return
     (*expr)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_expr_vardef_return
     (*expr_vardef)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_expr_string_return
     (*expr_string)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_expr_hash_return
     (*expr_hash)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_expr_dir_return
     (*expr_dir)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_expr_file_return
     (*expr_file)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_expr_file_analyze_return
     (*expr_file_analyze)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_source_return
     (*source)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_id_return
     (*id)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_attr_clause_return
     (*attr_clause)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_attr_return
     (*attr)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_hash_clause_return
     (*hash_clause)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_brute_force_clause_return
     (*brute_force_clause)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_let_clause_return
     (*let_clause)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_where_clause_return
     (*where_clause)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_boolean_expression_return
     (*boolean_expression)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_conditional_or_expression_return
     (*conditional_or_expression)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_conditional_and_expression_return
     (*conditional_and_expression)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_not_expression_return
     (*not_expression)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_exclusive_or_expression_return
     (*exclusive_or_expression)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_relational_expr_return
     (*relational_expr)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_relational_expr_str_return
     (*relational_expr_str)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_relational_expr_int_return
     (*relational_expr_int)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_assign_return
     (*assign)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_str_attr_return
     (*str_attr)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_int_attr_return
     (*int_attr)	(struct HLINQParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct HLINQParser_Ctx_struct * ctx);
    void	    (*free)   (struct HLINQParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pHLINQParser HLINQParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pHLINQParser HLINQParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ALG      4
#define ALG_REF      5
#define ANALYZE_FILE      6
#define AND      7
#define ASSIGN      8
#define ASSIGN_OP      9
#define ATTR_REF      10
#define BRUTE_FORCE      11
#define CLOSE_BRACE      12
#define COMMA      13
#define COMMENT      14
#define CR      15
#define CRACK      16
#define DICT_ATTR      17
#define DIR      18
#define DO      19
#define DOT      20
#define EOL      21
#define EQUAL      22
#define FILE      23
#define FIND      24
#define FOR      25
#define FROM      26
#define GE      27
#define GEASSIGN      28
#define HASH      29
#define HASH_DIR      30
#define HASH_FILE      31
#define HASH_STR      32
#define ID      33
#define ID_PART      34
#define ID_START      35
#define INT      36
#define LE      37
#define LEASSIGN      38
#define LET      39
#define LF      40
#define LIMIT_ATTR      41
#define MATCH      42
#define MAX_ATTR      43
#define MIN_ATTR      44
#define NAME_ATTR      45
#define NEWLINE      46
#define NOT      47
#define NOTEQUAL      48
#define NOTMATCH      49
#define NOT_OP      50
#define OFFSET_ATTR      51
#define OPEN_BRACE      52
#define OR      53
#define PARAMETER      54
#define PATH_ATTR      55
#define PLUS      56
#define SIZE_ATTR      57
#define STR      58
#define STRING      59
#define STRING1      60
#define STRING2      61
#define VALIDATE      62
#define VAR_DEF      63
#define WHERE      64
#define WITHSUBS      65
#define WS      66
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for HLINQParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
