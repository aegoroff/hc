/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : C:\\hg\\hc\\src\\hlinq\\HLINQ.g
 *     -                            On : 2011-11-22 10:49:12
 *     -                for the parser : HLINQParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
HLINQParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pHLINQParser, which is returned from a call to HLINQParserNew().
 *
 * The methods in pHLINQParser are  as follows:
 *
 *  - 
 void
      pHLINQParser->prog(pHLINQParser)
 *  - 
 void
      pHLINQParser->statement(pHLINQParser)
 *  - 
 void
      pHLINQParser->expr(pHLINQParser)
 *  - 
 void
      pHLINQParser->id(pHLINQParser)
 *  - 
 HLINQParser_string_return
      pHLINQParser->string(pHLINQParser)
 *  - 
 void
      pHLINQParser->recursively(pHLINQParser)
 *  - 
 void
      pHLINQParser->do_clause_file(pHLINQParser)
 *  - 
 void
      pHLINQParser->do_clause_string(pHLINQParser)
 *  - 
 void
      pHLINQParser->print_clause(pHLINQParser)
 *  - 
 void
      pHLINQParser->print(pHLINQParser)
 *  - 
 void
      pHLINQParser->attr_clause(pHLINQParser)
 *  - 
 void
      pHLINQParser->attr(pHLINQParser)
 *  - 
 void
      pHLINQParser->delete_clause(pHLINQParser)
 *  - 
 void
      pHLINQParser->copy_clause(pHLINQParser)
 *  - 
 void
      pHLINQParser->move_clause(pHLINQParser)
 *  - 
 void
      pHLINQParser->hash_clause(pHLINQParser)
 *  - 
 void
      pHLINQParser->md5(pHLINQParser)
 *  - 
 void
      pHLINQParser->md4(pHLINQParser)
 *  - 
 void
      pHLINQParser->sha1(pHLINQParser)
 *  - 
 void
      pHLINQParser->sha256(pHLINQParser)
 *  - 
 void
      pHLINQParser->sha384(pHLINQParser)
 *  - 
 void
      pHLINQParser->sha512(pHLINQParser)
 *  - 
 void
      pHLINQParser->crc32(pHLINQParser)
 *  - 
 void
      pHLINQParser->whirlpool(pHLINQParser)
 *  - 
 void
      pHLINQParser->brute_force_clause(pHLINQParser)
 *  - 
 void
      pHLINQParser->let_clause(pHLINQParser)
 *  - 
 void
      pHLINQParser->where_clause(pHLINQParser)
 *  - 
 void
      pHLINQParser->boolean_expression(pHLINQParser)
 *  - 
 void
      pHLINQParser->conditional_or_expression(pHLINQParser)
 *  - 
 void
      pHLINQParser->conditional_and_expression(pHLINQParser)
 *  - 
 void
      pHLINQParser->exclusive_or_expression(pHLINQParser)
 *  - 
 void
      pHLINQParser->assign(pHLINQParser)
 *  - 
 void
      pHLINQParser->str_attr(pHLINQParser)
 *  - 
 void
      pHLINQParser->int_attr(pHLINQParser)
 *  - 
 void
      pHLINQParser->min_attr(pHLINQParser)
 *  - 
 void
      pHLINQParser->max_attr(pHLINQParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_HLINQParser_H
#define _HLINQParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct HLINQParser_Ctx_struct HLINQParser, * pHLINQParser;



   #include "compiler.h"
#ifdef GTEST
  #include "displayError.h"
#endif


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct HLINQParser_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
}
    HLINQParser_string_return;





/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet()
 */
 /** Definition of the statement scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  HLINQParser_statementPush().
 */
typedef struct  HLINQParser_statement_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct HLINQParser_statement_SCOPE_struct * frame);

    /* =============================================================================
     * Programmer defined variables...
     */
    const char* id;

    /* End of programmer defined variables
     * =============================================================================
     */
}
    HLINQParser_statement_SCOPE, * pHLINQParser_statement_SCOPE;


/** Context tracking structure for 
HLINQParser

 */
struct HLINQParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  statement stack for use by pHLINQParser_statementPush()
     *  and pHLINQParser_statementPop()
     */
    pANTLR3_STACK pHLINQParser_statementStack;
    ANTLR3_UINT32 pHLINQParser_statementStack_limit;
    pHLINQParser_statement_SCOPE   (*pHLINQParser_statementPush)(struct HLINQParser_Ctx_struct * ctx);
    pHLINQParser_statement_SCOPE   pHLINQParser_statementTop;




     void
     (*prog)	(struct HLINQParser_Ctx_struct * ctx, apr_pool_t* root, BOOL onlyValidate);

     void
     (*statement)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*expr)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*id)	(struct HLINQParser_Ctx_struct * ctx);

     HLINQParser_string_return
     (*string)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*recursively)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*do_clause_file)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*do_clause_string)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*print_clause)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*print)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*attr_clause)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*attr)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*delete_clause)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*copy_clause)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*move_clause)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*hash_clause)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*md5)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*md4)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*sha1)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*sha256)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*sha384)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*sha512)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*crc32)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*whirlpool)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*brute_force_clause)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*let_clause)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*where_clause)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*boolean_expression)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*conditional_or_expression)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*conditional_and_expression)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*exclusive_or_expression)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*assign)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*str_attr)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*int_attr)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*min_attr)	(struct HLINQParser_Ctx_struct * ctx);

     void
     (*max_attr)	(struct HLINQParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct HLINQParser_Ctx_struct * ctx);
    void	    (*free)   (struct HLINQParser_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pHLINQParser HLINQParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pHLINQParser HLINQParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__44      44
#define T__45      45
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define AND      4
#define ASSIGN      5
#define ASSIGN_OP      6
#define CLOSE_BRACE      7
#define COMMA      8
#define COMMENT      9
#define COND_OP      10
#define COND_OP_INT      11
#define COND_OP_STR      12
#define CRC32      13
#define DO      14
#define DOT      15
#define ECHAR      16
#define EOL      17
#define EQUAL      18
#define FOR      19
#define GE      20
#define ID      21
#define ID_PART      22
#define ID_START      23
#define INT      24
#define LE      25
#define LET      26
#define MATCH      27
#define MD4      28
#define MD5      29
#define NEWLINE      30
#define NOT      31
#define OPEN_BRACE      32
#define OR      33
#define PLUS      34
#define SHA1      35
#define SHA256      36
#define SHA384      37
#define SHA512      38
#define STRING      39
#define STRING1      40
#define STRING2      41
#define WHIRLPOOL      42
#define WS      43
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for HLINQParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
