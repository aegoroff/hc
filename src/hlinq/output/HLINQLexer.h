/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : D:\\hg\\hc\\src\\hlinq\\HLINQ.g
 *     -                            On : 2011-11-21 22:32:51
 *     -                 for the lexer : HLINQLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
HLINQLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pHLINQLexer, which is returned from a call to HLINQLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pHLINQLexer are  as follows:
 *
 *  - 
 void
      pHLINQLexer->T__42(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__43(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__44(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__45(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__46(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__47(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__48(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__49(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__50(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__51(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__52(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__53(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__54(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__55(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__56(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__57(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__58(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->OR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->AND(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->FOR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->DO(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->LET(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->MD5(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->SHA1(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->SHA256(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->SHA384(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->SHA512(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->MD4(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->CRC32(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->WHIRLPOOL(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STRING1(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STRING2(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STRING(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ECHAR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ID(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ID_START(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ID_PART(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->INT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->COND_OP(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->COND_OP_STR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->COND_OP_INT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->NEWLINE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->WS(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->DOT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->COMMA(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->OPEN_BRACE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->CLOSE_BRACE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->COMMENT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->EOL(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->PLUS(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->EQUAL(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->NOT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->GE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->LE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->MATCH(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->Tokens(pHLINQLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_HLINQLexer_H
#define _HLINQLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct HLINQLexer_Ctx_struct HLINQLexer, * pHLINQLexer;



	#define	ANTLR3_INLINE_INPUT_ASCII
	#include "compiler.h"
#ifdef GTEST
  #include "displayError.h"
#endif


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
HLINQLexer

 */
struct HLINQLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__42)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__43)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__44)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__45)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__46)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__47)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__48)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__49)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__50)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__51)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__52)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__53)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__54)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__55)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__56)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__57)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__58)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mFOR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mDO)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mLET)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mMD5)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSHA1)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSHA256)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSHA384)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSHA512)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mMD4)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCRC32)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mWHIRLPOOL)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTRING1)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTRING2)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mECHAR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mID_START)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mID_PART)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mINT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCOND_OP)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCOND_OP_STR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCOND_OP_INT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mNEWLINE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mOPEN_BRACE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCLOSE_BRACE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mEOL)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mEQUAL)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mNOT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mGE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mLE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mMATCH)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct HLINQLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct HLINQLexer_Ctx_struct * ctx);
    void	    (*free)   (struct HLINQLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pHLINQLexer HLINQLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pHLINQLexer HLINQLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__42      42
#define T__43      43
#define T__44      44
#define T__45      45
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define AND      4
#define CLOSE_BRACE      5
#define COMMA      6
#define COMMENT      7
#define COND_OP      8
#define COND_OP_INT      9
#define COND_OP_STR      10
#define CRC32      11
#define DO      12
#define DOT      13
#define ECHAR      14
#define EOL      15
#define EQUAL      16
#define FOR      17
#define GE      18
#define ID      19
#define ID_PART      20
#define ID_START      21
#define INT      22
#define LE      23
#define LET      24
#define MATCH      25
#define MD4      26
#define MD5      27
#define NEWLINE      28
#define NOT      29
#define OPEN_BRACE      30
#define OR      31
#define PLUS      32
#define SHA1      33
#define SHA256      34
#define SHA384      35
#define SHA512      36
#define STRING      37
#define STRING1      38
#define STRING2      39
#define WHIRLPOOL      40
#define WS      41
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for HLINQLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
