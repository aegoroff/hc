/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : HLINQ.g
 *     -                            On : 2013-06-28 21:13:00
 *     -                 for the lexer : HLINQLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
HLINQLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pHLINQLexer, which is returned from a call to HLINQLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pHLINQLexer are  as follows:
 *
 *  - 
 void
      pHLINQLexer->ALG(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->NAME_ATTR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->PATH_ATTR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->DICT_ATTR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->SIZE_ATTR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->LIMIT_ATTR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->OFFSET_ATTR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->MIN_ATTR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->MAX_ATTR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->CRACK(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->WHERE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->OR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->AND(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->NOT_OP(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->FOR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->FROM(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->PARAMETER(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->DO(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->FIND(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->WITHSUBS(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->VALIDATE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->LET(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->DIR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->FILE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->HASH(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STRING1(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STRING2(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STRING(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ID(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ID_START(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ID_PART(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->INT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ASSIGN_OP(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->NEWLINE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->WS(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->DOT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->COMMA(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->OPEN_BRACE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->CLOSE_BRACE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->COMMENT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->EOL(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->LF(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->CR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->PLUS(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->EQUAL(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->NOTEQUAL(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ASSIGN(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->NOT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->GE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->LE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->MATCH(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->NOTMATCH(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->LEASSIGN(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->GEASSIGN(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->Tokens(pHLINQLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_HLINQLexer_H
#define _HLINQLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct HLINQLexer_Ctx_struct HLINQLexer, * pHLINQLexer;



	#define	ANTLR3_INLINE_INPUT_ASCII
	#include "compiler.h"
#ifdef GTEST
  #include "displayError.h"
#endif


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
HLINQLexer

 */
struct HLINQLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mALG)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mNAME_ATTR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mPATH_ATTR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mDICT_ATTR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSIZE_ATTR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mLIMIT_ATTR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mOFFSET_ATTR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mMIN_ATTR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mMAX_ATTR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCRACK)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mWHERE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mNOT_OP)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mFOR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mFROM)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mPARAMETER)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mDO)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mFIND)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mWITHSUBS)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mVALIDATE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mLET)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mDIR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mFILE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mHASH)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTRING1)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTRING2)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mID_START)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mID_PART)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mINT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mASSIGN_OP)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mNEWLINE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mOPEN_BRACE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCLOSE_BRACE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mEOL)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mLF)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mEQUAL)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mNOTEQUAL)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mASSIGN)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mNOT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mGE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mLE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mMATCH)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mNOTMATCH)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mLEASSIGN)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mGEASSIGN)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct HLINQLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct HLINQLexer_Ctx_struct * ctx);
    void	    (*free)   (struct HLINQLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pHLINQLexer HLINQLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pHLINQLexer HLINQLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ALG      4
#define ALG_REF      5
#define ANALYZE_FILE      6
#define AND      7
#define ASSIGN      8
#define ASSIGN_OP      9
#define ATTR_REF      10
#define BRUTE_FORCE      11
#define CLOSE_BRACE      12
#define COMMA      13
#define COMMENT      14
#define CR      15
#define CRACK      16
#define DICT_ATTR      17
#define DIR      18
#define DO      19
#define DOT      20
#define EOL      21
#define EQUAL      22
#define FILE      23
#define FIND      24
#define FOR      25
#define FROM      26
#define GE      27
#define GEASSIGN      28
#define HASH      29
#define HASH_DIR      30
#define HASH_FILE      31
#define HASH_STR      32
#define ID      33
#define ID_PART      34
#define ID_START      35
#define INT      36
#define LE      37
#define LEASSIGN      38
#define LET      39
#define LF      40
#define LIMIT_ATTR      41
#define MATCH      42
#define MAX_ATTR      43
#define MIN_ATTR      44
#define NAME_ATTR      45
#define NEWLINE      46
#define NOT      47
#define NOTEQUAL      48
#define NOTMATCH      49
#define NOT_OP      50
#define OFFSET_ATTR      51
#define OPEN_BRACE      52
#define OR      53
#define PARAMETER      54
#define PATH_ATTR      55
#define PLUS      56
#define SIZE_ATTR      57
#define STR      58
#define STRING      59
#define STRING1      60
#define STRING2      61
#define VALIDATE      62
#define VAR_DEF      63
#define WHERE      64
#define WITHSUBS      65
#define WS      66
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for HLINQLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
