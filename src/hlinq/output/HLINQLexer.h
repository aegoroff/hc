/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : C:\\hg\\hc\\src\\hlinq\\HLINQ.g
 *     -                            On : 2011-11-17 09:13:05
 *     -                 for the lexer : HLINQLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
HLINQLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pHLINQLexer, which is returned from a call to HLINQLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pHLINQLexer are  as follows:
 *
 *  - 
 void
      pHLINQLexer->T__18(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__19(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__20(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__21(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__22(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__23(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__24(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__25(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__26(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__27(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__28(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__29(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__30(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__31(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__32(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__33(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->T__34(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->HASH(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STRING_LITERAL1(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STRING_LITERAL2(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->STRING_LITERAL(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->ECHAR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->IDENTIFIER(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->IdentifierStart(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->IdentifierPart(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->INT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->COND_OPERATOR(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->NEWLINE(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->WS(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->COMMENT(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->EOL(pHLINQLexer)
 *  - 
 void
      pHLINQLexer->Tokens(pHLINQLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_HLINQLexer_H
#define _HLINQLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct HLINQLexer_Ctx_struct HLINQLexer, * pHLINQLexer;



	#define	ANTLR3_INLINE_INPUT_ASCII
	#include "compiler.h"


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
HLINQLexer

 */
struct HLINQLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__18)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__19)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__20)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__21)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__22)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__23)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__24)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__25)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__26)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__27)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__28)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__29)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__30)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__31)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__32)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__33)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mT__34)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mHASH)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTRING_LITERAL1)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTRING_LITERAL2)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mSTRING_LITERAL)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mECHAR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mIdentifierStart)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mIdentifierPart)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mINT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCOND_OPERATOR)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mNEWLINE)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mEOL)	(struct HLINQLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct HLINQLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct HLINQLexer_Ctx_struct * ctx);
    void	    (*free)   (struct HLINQLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pHLINQLexer HLINQLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pHLINQLexer HLINQLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__18      18
#define T__19      19
#define T__20      20
#define T__21      21
#define T__22      22
#define T__23      23
#define T__24      24
#define T__25      25
#define T__26      26
#define T__27      27
#define T__28      28
#define T__29      29
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define COMMENT      4
#define COND_OPERATOR      5
#define ECHAR      6
#define EOL      7
#define HASH      8
#define IDENTIFIER      9
#define INT      10
#define IdentifierPart      11
#define IdentifierStart      12
#define NEWLINE      13
#define STRING_LITERAL      14
#define STRING_LITERAL1      15
#define STRING_LITERAL2      16
#define WS      17
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for HLINQLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
