/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : C:\\hg\\hc\\src\\hlinq\\HLINQWalker.g
 *     -                            On : 2012-08-21 10:47:31
 *     -           for the tree parser : HLINQWalkerTreeParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The tree parser 
HLINQWalker

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pHLINQWalker, which is returned from a call to HLINQWalkerNew().
 *
 * The methods in pHLINQWalker are  as follows:
 *
 *  - 
 HLINQWalker_prog_return
      pHLINQWalker->prog(pHLINQWalker)
 *  - 
 HLINQWalker_statement_return
      pHLINQWalker->statement(pHLINQWalker)
 *  - 
 HLINQWalker_expr_return
      pHLINQWalker->expr(pHLINQWalker)
 *  - 
 HLINQWalker_expr_vardef_return
      pHLINQWalker->expr_vardef(pHLINQWalker)
 *  - 
 HLINQWalker_expr_string_return
      pHLINQWalker->expr_string(pHLINQWalker)
 *  - 
 HLINQWalker_expr_hash_return
      pHLINQWalker->expr_hash(pHLINQWalker)
 *  - 
 HLINQWalker_expr_dir_return
      pHLINQWalker->expr_dir(pHLINQWalker)
 *  - 
 HLINQWalker_expr_file_return
      pHLINQWalker->expr_file(pHLINQWalker)
 *  - 
 HLINQWalker_source_return
      pHLINQWalker->source(pHLINQWalker)
 *  - 
 HLINQWalker_value_return
      pHLINQWalker->value(pHLINQWalker)
 *  - 
 HLINQWalker_id_return
      pHLINQWalker->id(pHLINQWalker)
 *  - 
 HLINQWalker_var_return
      pHLINQWalker->var(pHLINQWalker)
 *  - 
 HLINQWalker_attr_clause_return
      pHLINQWalker->attr_clause(pHLINQWalker)
 *  - 
 HLINQWalker_attr_return
      pHLINQWalker->attr(pHLINQWalker)
 *  - 
 HLINQWalker_hash_clause_return
      pHLINQWalker->hash_clause(pHLINQWalker)
 *  - 
 HLINQWalker_brute_force_clause_return
      pHLINQWalker->brute_force_clause(pHLINQWalker)
 *  - 
 HLINQWalker_let_clause_return
      pHLINQWalker->let_clause(pHLINQWalker)
 *  - 
 HLINQWalker_where_clause_return
      pHLINQWalker->where_clause(pHLINQWalker)
 *  - 
 HLINQWalker_boolean_expression_return
      pHLINQWalker->boolean_expression(pHLINQWalker)
 *  - 
 HLINQWalker_assign_return
      pHLINQWalker->assign(pHLINQWalker)
 *  - 
 HLINQWalker_str_attr_return
      pHLINQWalker->str_attr(pHLINQWalker)
 *  - 
 HLINQWalker_int_attr_return
      pHLINQWalker->int_attr(pHLINQWalker)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_HLINQWalker_H
#define _HLINQWalker_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct HLINQWalker_Ctx_struct HLINQWalker, * pHLINQWalker;



   #include "compiler.h"
#ifdef GTEST
  #include "displayError.h"
#endif


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct HLINQWalker_prog_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_prog_return;



typedef struct HLINQWalker_statement_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_statement_return;



typedef struct HLINQWalker_expr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_expr_return;



typedef struct HLINQWalker_expr_vardef_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_expr_vardef_return;



typedef struct HLINQWalker_expr_string_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_expr_string_return;



typedef struct HLINQWalker_expr_hash_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_expr_hash_return;



typedef struct HLINQWalker_expr_dir_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_expr_dir_return;



typedef struct HLINQWalker_expr_file_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_expr_file_return;



typedef struct HLINQWalker_source_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_source_return;



typedef struct HLINQWalker_value_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_value_return;



typedef struct HLINQWalker_id_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_id_return;



typedef struct HLINQWalker_var_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_var_return;



typedef struct HLINQWalker_attr_clause_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_attr_clause_return;



typedef struct HLINQWalker_attr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_attr_return;



typedef struct HLINQWalker_hash_clause_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_hash_clause_return;



typedef struct HLINQWalker_brute_force_clause_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_brute_force_clause_return;



typedef struct HLINQWalker_let_clause_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_let_clause_return;



typedef struct HLINQWalker_where_clause_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_where_clause_return;



typedef struct HLINQWalker_boolean_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

    pANTLR3_UINT8 value;
    Attr code;
}
    HLINQWalker_boolean_expression_return;



typedef struct HLINQWalker_assign_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

}
    HLINQWalker_assign_return;



typedef struct HLINQWalker_str_attr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

    Attr code;
}
    HLINQWalker_str_attr_return;



typedef struct HLINQWalker_int_attr_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;
    pANTLR3_BASE_TREE	tree;

    Attr code;
}
    HLINQWalker_int_attr_return;




/** Context tracking structure for 
HLINQWalker

 */
struct HLINQWalker_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_TREE_PARSER	    pTreeParser;


     HLINQWalker_prog_return
     (*prog)	(struct HLINQWalker_Ctx_struct * ctx, apr_pool_t* root, BOOL onlyValidate, BOOL isPrintCalcTime, BOOL isPrintLowCase);

     HLINQWalker_statement_return
     (*statement)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_expr_return
     (*expr)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_expr_vardef_return
     (*expr_vardef)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_expr_string_return
     (*expr_string)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_expr_hash_return
     (*expr_hash)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_expr_dir_return
     (*expr_dir)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_expr_file_return
     (*expr_file)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_source_return
     (*source)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_value_return
     (*value)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_id_return
     (*id)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_var_return
     (*var)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_attr_clause_return
     (*attr_clause)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_attr_return
     (*attr)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_hash_clause_return
     (*hash_clause)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_brute_force_clause_return
     (*brute_force_clause)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_let_clause_return
     (*let_clause)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_where_clause_return
     (*where_clause)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_boolean_expression_return
     (*boolean_expression)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_assign_return
     (*assign)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_str_attr_return
     (*str_attr)	(struct HLINQWalker_Ctx_struct * ctx);

     HLINQWalker_int_attr_return
     (*int_attr)	(struct HLINQWalker_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct HLINQWalker_Ctx_struct * ctx);
    void	    (*free)   (struct HLINQWalker_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pHLINQWalker HLINQWalkerNew         (
pANTLR3_COMMON_TREE_NODE_STREAM
 instream);
ANTLR3_API pHLINQWalker HLINQWalkerNewSSD      (
pANTLR3_COMMON_TREE_NODE_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
tree parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AND      4
#define ASSIGN      5
#define ASSIGN_OP      6
#define ATTR_REF      7
#define BRUTE_FORCE      8
#define CLOSE_BRACE      9
#define COMMA      10
#define COMMENT      11
#define CR      12
#define CRACK      13
#define CRC32      14
#define DICT_ATTR      15
#define DIR      16
#define DO      17
#define DOT      18
#define EOL      19
#define EQUAL      20
#define FILE      21
#define FIND      22
#define FOR      23
#define FROM      24
#define GE      25
#define GEASSIGN      26
#define HASH      27
#define HASH_DIR      28
#define HASH_FILE      29
#define HASH_STR      30
#define ID      31
#define ID_PART      32
#define ID_START      33
#define INT      34
#define LE      35
#define LEASSIGN      36
#define LET      37
#define LF      38
#define LIMIT_ATTR      39
#define MATCH      40
#define MAX_ATTR      41
#define MD4      42
#define MD5      43
#define MIN_ATTR      44
#define NAME_ATTR      45
#define NEWLINE      46
#define NOT      47
#define NOTEQUAL      48
#define NOTMATCH      49
#define NOT_OP      50
#define OFFSET_ATTR      51
#define OPEN_BRACE      52
#define OR      53
#define PATH_ATTR      54
#define PLUS      55
#define SET      56
#define SHA1      57
#define SHA256      58
#define SHA384      59
#define SHA512      60
#define SIZE_ATTR      61
#define STR      62
#define STRING      63
#define STRING1      64
#define STRING2      65
#define VALIDATE      66
#define VAR_DEF      67
#define WHERE      68
#define WHIRLPOOL      69
#define WITHSUBS      70
#define WS      71
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for HLINQWalker
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
